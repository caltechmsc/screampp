name: Release Assets

on:
  release:
    types: [published]

env:
  BINARY_PREFIX: screampp
  DATA_PREFIX: screampp-data

jobs:
  build-cli:
    name: Build CLI for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_format: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive_format: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive_format: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            archive_format: tar.gz
          - os: macos-13
            target: x86_64-apple-darwin
            archive_format: tar.gz
          - os: macos-14
            target: aarch64-apple-darwin
            archive_format: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive_format: zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tool (for Linux targets)
        if: runner.os == 'Linux'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build binary with cargo/cross
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            cross build --package scream-cli --release --target ${{ matrix.target }}
          else
            cargo build --package scream-cli --release --target ${{ matrix.target }}
          fi
        env:
          CARGO_TERM_COLOR: always

      - name: Prepare package content
        shell: bash
        run: |
          ARTIFACT_DIR="dist"
          mkdir -p $ARTIFACT_DIR

          if [[ "${{ matrix.target }}" == *"-windows-"* ]]; then
            BINARY_NAME="scream.exe"
            SOURCE_PATH="target/${{ matrix.target }}/release/$BINARY_NAME"
          else
            BINARY_NAME="scream"
            SOURCE_PATH="target/${{ matrix.target }}/release/$BINARY_NAME"
          fi

          cp "$SOURCE_PATH" "$ARTIFACT_DIR/$BINARY_NAME"
          cp LICENSE README.md "$ARTIFACT_DIR/"

          RELEASE_VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//')
          ARCHIVE_NAME="${{ env.BINARY_PREFIX }}-v${RELEASE_VERSION}-${{ matrix.target }}"

          cd $ARTIFACT_DIR
          if [[ "${{ matrix.archive_format }}" == "zip" ]]; then
            zip -r "../${ARCHIVE_NAME}.zip" .
          else
            tar -czf "../${ARCHIVE_NAME}.tar.gz" .
          fi
          cd ..

          echo "ARCHIVE_PATH=${ARCHIVE_NAME}.${{ matrix.archive_format }}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cli-${{ matrix.target }}
          path: ${{ env.ARCHIVE_PATH }}
          retention-days: 1

  package-data:
    name: Package Data Directory
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install zstd for high compression
        run: sudo apt-get update && sudo apt-get install -y zstd

      - name: Create data archive
        shell: bash
        run: |
          RELEASE_VERSION=$(echo "${{ github.ref_name }}" | sed 's/v//')
          ARCHIVE_NAME="${{ env.DATA_PREFIX }}-v${RELEASE_VERSION}.tar.zst"

          tar --zstd -cf "$ARCHIVE_NAME" -I "zstd -19 -T0" data

          echo "ARCHIVE_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: data-package
          path: ${{ env.ARCHIVE_PATH }}
          retention-days: 1

  upload-assets:
    name: Upload Assets to Release
    needs: [build-cli, package-data]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Upload assets to GitHub Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: artifacts/**/*.*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
